//highlights the entire function
//let add = 10;
//fun add(a, b) {
//    return a + b;
//}

let x = y + 1;

fun sub(z, y) {
    return z - y;
}
fun add(x, y) {
    return sub(x + y);
}

fun apply(f, x, y) {
    return f(x, y);
}

//let z = sub(1, 2);
//print(z);
//print(sub(2, 10));
//print(apply(add, 100, 10000));

fun fn(a, b) {
    print(a);
    let i = 0;
    //break;
    while i < 10 {
	if i == 5 {
	    print("BREAK");
	    return -i;
	}
	print(i);
        i = i + 1;
    }
}
//print(fn(-1, 2));

print(());

// /*
let x = 100;
if x == 1 {
    print("1z");
} else if x < 10 {
    print("1-10");

} else if x < 100 {
    print("hah");
} else {
    print("too big");
}
// */



/*
let s = time();
let i = 0;
while i < 1000000 {
    i = i + 1;
}
print(time()-s);
*/

/*
//print print(1 1);
print();
print(1);
print(1, true);
print("Hello World!");
let x = print;
x("works? works.");
x(time());
//x(time(1));
//print(let x = 10;);
*/

/*
if 1 != 1 {
    let x = 10;
    x = 1;
} else {
    let y = 1;
    y = 3;
    if 2 == 2 {
        let z = 20;
	z = y;
	print(z);
	//let y = 10;
	//print(y);
    }
    print(y);
}
*/
/*
"variable declaration";
let a = 1; let _x = 1; let y_y = 1; let y_ = 1;
let a0 = 1; let ýářžřýáíů = 1;
a; _x; y_y; y_; a0; ýářžřýáíů;
// errors
//let let = 1;
//let = 1;
//let 1 = 1;
//let x = x;
"variable usage and reassigning";
a = 10; a;
// errors
//x = 10;
*/
/*
"data types";
1; 214781; -1000;
// overflow
//2379045798;
//10000*1000000;

1.0; 0.1; 1.111; 1.1479241241456456;  // note the rounding for the last one

true; false;

""; "hello";
// escape sequences (TODO)
//"testing\nfwa";
*/
/*
"operators";
1+1; 1.0+1.1; "a"+"b";
1-1; 1.0-1.1;
-1; -1.1;
2*2; 3.0*1.5;
20/5; 20/3; 20.0/5.0; 20.0/3.0;
21%6; 20.1 % 3.5;

1 == 1; 1 == 2; 1.1 == 1.1; 1.1 == 1.2;
1 != 1; 1 != 2; 1.1 != 1.1; 1.1 != 1.2;
1 >= 1; 1 >= 2; 1.1 >= 1.1; 1.1 >= 1.2;
1 > 1; 1 > 2; 1.1 > 1.1; 1.1 > 1.2;
1 <= 1; 1 <= 2; 1.1 <= 1.1; 1.1 <= 1.2;
1 < 1; 1 < 2; 1.1 < 1.1; 1.1 < 1.2;
!true; !false;

false || false; true || false; true || false; true || true; 
false && false; true && false; true && false; true && true; 

// errors
//1 == 1.1;
//1.2 == "hi I am a test";
*/
/*
"reassociation";
1-1-1-1;
2*3-5;
2+2*3-5;
*/

//"comments";
//this is a comment
///// this is a comment too
// //- this is not a comment but a symbol // (which is commented not to raise an error)
/* this is a block comment */
/*
this comment
has several lines
*/
/** this is ok, only stars */
// /*- this is in fact an operator */
// /* and this one is an operator too, but at the end *//

/*
"if/else";
if true { true; }
if false { false; }  // does nothing
if true { true; } else { false; }
if false { true; } else { false; }
if 1+1 < 20/5 {
    "Hello" + " world!";
} else {
    "How did we get here?";
}
*/
/*
let x = 10;
if x > 20 {
    "Hello" + " world!";
} else if x == 2 {
    "How did we get here?";
} else if x > 20/5 {
    "More expressions";
    x = 10000;
} else {
    "The end.";
}
x;
// errors
//if { true; }
//if true true;
//if true { true;
*/

//while false { 1; }
/*
let x = 16;
if x == 0 {
    "x is zero";
} else if x < 10 {
    "x is smaller than ten";
} else if x > 11 {
    "x is greater than eleven";
} else {
    "x is either ten or eleven";
}
*/
/*
// "multiline error";
10 - (1456453453  // imagine this is not a binary operation but something more complex
% 100 * 23) /
/* this is a comment to make things less readable * /
(1 - 1) + 1000;
*/
