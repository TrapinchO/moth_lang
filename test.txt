// /*
// CLOSURES
fun <<(f, g) {
    fun a(x) {
        return f(g(x));
    }
    return a;
}
(print << len)([1, 2]);

fun fact(n) {
    let total = 1;
    while n > 1 {
        total = total * n;
        n = n - 1;
    }
    return total;
}
//print(fact(3), fact(6), fact(8));
//print((fact << len)([1, 2, 3, 4]));
// */


// TODO: some fun with operators later
// precedence and associativity cannot be customized
/*
fun <$>(f, ls) {
    let idx = 0;
    let ls2 = [];
    while idx < len(ls) {
        ls2 = ls2 + [f(ls[idx])];
        idx = idx + 1;
    }
    return ls2;
}
fun $(f, x) {
    return f(x);
}
fun a(x) {
    return x * 2;
}
print $ a <$> [1, 2, 3];
*/








// FUN FACT:
// the following code runs FASTER then the one below it
// the reason is that the latter issues an unused variable warning
/*
// 800ns
fun f() { return [1]; }
let x = [f];
x[0]();
f()[0];
*/
/*
// 1600ns
fun f() { return [1]; }
let x = [f];
f()[0];
*/

